using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;

public class SqlHR_OverTimeRuleSetUpProvider:DataAccessObject
{
	public SqlHR_OverTimeRuleSetUpProvider()
    {
    }


    public DataSet  GetAllHR_OverTimeRuleSetUps()
    {
        DataSet HR_OverTimeRuleSetUps = new DataSet();
        using (SqlConnection connection = new SqlConnection(this.ConnectionString))
        {
            SqlCommand command = new SqlCommand("GetAllHR_OverTimeRuleSetUps", connection);
            command.CommandType = CommandType.StoredProcedure;
            connection.Open();
            SqlDataAdapter myadapter = new SqlDataAdapter(command);
            myadapter.Fill(HR_OverTimeRuleSetUps);
            myadapter.Dispose();
            connection.Close();

            return HR_OverTimeRuleSetUps;
        }
    }
	public DataSet GetHR_OverTimeRuleSetUpPageWise(int pageIndex, int PageSize, out int recordCount)
    {
    DataSet ds = new DataSet();
        using (SqlConnection connection = new SqlConnection(this.ConnectionString))
        {
            using (SqlCommand command = new SqlCommand("GetHR_OverTimeRuleSetUpPageWise", connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@PageIndex", pageIndex);
                command.Parameters.AddWithValue("@PageSize",  PageSize );
                command.Parameters.Add("@RecordCount", SqlDbType.Int, 4);
                command.Parameters["@RecordCount"].Direction = ParameterDirection.Output;
                connection.Open();
                SqlDataAdapter myadapter = new SqlDataAdapter(command);
                myadapter.Fill(ds);
                myadapter.Dispose();
                connection.Close();
                recordCount = Convert.ToInt32(command.Parameters["@RecordCount"].Value);
                return ds;
            }
        }
    }


    public DataSet  GetDropDownLisAllHR_OverTimeRuleSetUp()
    {
        DataSet HR_OverTimeRuleSetUps = new DataSet();
        using (SqlConnection connection = new SqlConnection(this.ConnectionString))
        {
            SqlCommand command = new SqlCommand("GetDropDownListAllHR_OverTimeRuleSetUp", connection);
            command.CommandType = CommandType.StoredProcedure;
            connection.Open();
            SqlDataAdapter myadapter = new SqlDataAdapter(command);
            myadapter.Fill(HR_OverTimeRuleSetUps);
            myadapter.Dispose();
            connection.Close();

            return HR_OverTimeRuleSetUps;
        }
    }

    public DataSet   GetAllHR_LunchRulesWithRelation()
    {
       DataSet ds = new DataSet();
       using (SqlConnection connection = new SqlConnection(this.ConnectionString))
        {
            SqlCommand command = new SqlCommand("GetAllHR_LunchRulesWithRelation", connection);
            command.CommandType = CommandType.StoredProcedure;
            connection.Open();
            SqlDataAdapter myadapter = new SqlDataAdapter(command);
            myadapter.Fill(ds);
            myadapter.Dispose();
            connection.Close();

            return ds;
        }
    }
    public List<HR_OverTimeRuleSetUp> GetHR_OverTimeRuleSetUpsFromReader(IDataReader reader)
    {
        List<HR_OverTimeRuleSetUp> hR_OverTimeRuleSetUps = new List<HR_OverTimeRuleSetUp>();

        while (reader.Read())
        {
            hR_OverTimeRuleSetUps.Add(GetHR_OverTimeRuleSetUpFromReader(reader));
        }
        return hR_OverTimeRuleSetUps;
    }

    public HR_OverTimeRuleSetUp GetHR_OverTimeRuleSetUpFromReader(IDataReader reader)
    {
        try
        {
            HR_OverTimeRuleSetUp hR_OverTimeRuleSetUp = new HR_OverTimeRuleSetUp
                (

                     DataAccessObject.IsNULL<int>(reader["OverTimeRuleSetUpID"]),
                     DataAccessObject.IsNULL<string>(reader["OverTimeRuleSetUpName"]),
                     DataAccessObject.IsNULL<int>(reader["OverTimeRuleValue"]),
                     DataAccessObject.IsNULL<string>(reader["OverTimeRuleOperator"])
                );
             return hR_OverTimeRuleSetUp;
        }
        catch(Exception ex)
        {
            return null;
        }
    }

    public HR_OverTimeRuleSetUp  GetHR_OverTimeRuleSetUpByOverTimeRuleSetUpID(int  overTimeRuleSetUpID)
    {
        using (SqlConnection connection = new SqlConnection(this.ConnectionString))
        {
            SqlCommand command = new SqlCommand("GetHR_OverTimeRuleSetUpByOverTimeRuleSetUpID", connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add("@OverTimeRuleSetUpID", SqlDbType.Int).Value = overTimeRuleSetUpID;
            connection.Open();
            IDataReader reader = command.ExecuteReader(CommandBehavior.SingleRow);
            if (reader.Read())
            {
            return GetHR_OverTimeRuleSetUpFromReader(reader);
             }
            else
            {
            return null;
            }
        }
    }

    public int InsertHR_OverTimeRuleSetUp(HR_OverTimeRuleSetUp hR_OverTimeRuleSetUp)
    {
        using (SqlConnection connection = new SqlConnection(this.ConnectionString))
        {
            SqlCommand cmd = new SqlCommand("InsertHR_OverTimeRuleSetUp", connection);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@OverTimeRuleSetUpID", SqlDbType.Int).Direction = ParameterDirection.Output;
            cmd.Parameters.Add("@OverTimeRuleSetUpName", SqlDbType.NVarChar).Value = hR_OverTimeRuleSetUp.OverTimeRuleSetUpName;
            cmd.Parameters.Add("@OverTimeRuleValue", SqlDbType.Int).Value = hR_OverTimeRuleSetUp.OverTimeRuleValue;
            cmd.Parameters.Add("@OverTimeRuleOperator", SqlDbType.NVarChar).Value = hR_OverTimeRuleSetUp.OverTimeRuleOperator;
            connection.Open();

            int result = cmd.ExecuteNonQuery();
            return (int)cmd.Parameters["@OverTimeRuleSetUpID"].Value;
        }
    }

    public bool UpdateHR_OverTimeRuleSetUp(HR_OverTimeRuleSetUp hR_OverTimeRuleSetUp)
    {
        using (SqlConnection connection = new SqlConnection(this.ConnectionString))
        {
            SqlCommand cmd = new SqlCommand("UpdateHR_OverTimeRuleSetUp", connection);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@OverTimeRuleSetUpID", SqlDbType.Int).Value = hR_OverTimeRuleSetUp.OverTimeRuleSetUpID;
            cmd.Parameters.Add("@OverTimeRuleSetUpName", SqlDbType.NVarChar).Value = hR_OverTimeRuleSetUp.OverTimeRuleSetUpName;
            cmd.Parameters.Add("@OverTimeRuleValue", SqlDbType.Int).Value = hR_OverTimeRuleSetUp.OverTimeRuleValue;
            cmd.Parameters.Add("@OverTimeRuleOperator", SqlDbType.NVarChar).Value = hR_OverTimeRuleSetUp.OverTimeRuleOperator;
            connection.Open();

            int result = cmd.ExecuteNonQuery();
            return result == 1;
        }
    }

    public bool DeleteHR_OverTimeRuleSetUp(int overTimeRuleSetUpID)
    {
        using (SqlConnection connection = new SqlConnection(this.ConnectionString))
        {
            SqlCommand cmd = new SqlCommand("DeleteHR_OverTimeRuleSetUp", connection);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@OverTimeRuleSetUpID", SqlDbType.Int).Value = overTimeRuleSetUpID;
            connection.Open();

            int result = cmd.ExecuteNonQuery();
            return (result == 1);
        }
    }
}

